#!/opt/homebrew/bin/bash

# Kubernetes namespace selector using fzf
# Dependencies: kubectl, fzf

set -e

KUBECTL=$(which kubectl)
FZF=$(which fzf)
CURRENT_CONTEXT=$($KUBECTL config current-context)


switch_namespace() {
    local ns="$1"

    if [[ "$ns" == "default" ]]; then
        # Remove namespace setting for default
        $KUBECTL config set-context --current --namespace=""
        echo "Removed namespace setting (using default namespace)"
    else
        $KUBECTL config set-context --current --namespace="$ns"
        echo "Switched to namespace: $ns"
    fi
}


# Function to show interactive namespace selector
select_namespace_interactive() {
    local initial_query="$1"

    # Get namespaces
    namespaces=$($KUBECTL get namespaces --context="$CURRENT_CONTEXT")

    # Use fzf to select a namespace from the menu with a preview window for context
    selected=$(echo "$namespaces" | $FZF \
        --ansi \
        --no-scrollbar \
        --color=gutter:-1 \
        --header-lines=1 \
        --layout=reverse \
        --border=none \
        --height=20 \
        --no-multi \
        --no-info \
        --cycle \
        --no-separator \
        --delimiter='\s+' \
        --nth=1 \
        --query="$initial_query" \
        --preview="echo -e 'Current context: \033[1;34m$CURRENT_CONTEXT\033[0m'" \
        --preview-window=bottom:1)

    # If a selection was made (not cancelled), switch to that namespace
    if [[ -n "$selected" ]]; then
        # Extract namespace name (first column)
        ns=$(echo "$selected" | awk '{print $1}')
        switch_namespace "$ns"
    else
        echo "Selection cancelled"
    fi
}


main() {
    # If namespace is provided as an argument, use it directly
    if [[ -n "$1" ]]; then
        # Special case: "-" means remove the namespace setting
        if [[ "$1" == "-" ]]; then
            switch_namespace "default"
        # Otherwise check if the namespace exists
        elif $KUBECTL get namespace "$1" --context="$CURRENT_CONTEXT" &>/dev/null; then
            switch_namespace "$1"
        else
            # Namespace not found, pass it as initial query to interactive selector
            select_namespace_interactive "$1"
        fi
    else
        select_namespace_interactive ""
    fi
}

main "$@"